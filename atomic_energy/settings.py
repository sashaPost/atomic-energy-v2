"""
Django settings for atomic_energy project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from .ckeditor_configs import CKEDITOR_CONFIGS
from .simple_jwt_settings import SIMPLE_JWT
from django.core.management.utils import get_random_secret_key  

from django.conf import settings



load_dotenv('.env')
# might be useful for deployment:
# dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
# load_dotenv(dotenv_path)

# fixed the 'NameError: name '_mysql' is not defined':
import pymysql
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# HAVE TO GENERATE A NEW ONE FOR THE FINAL DEPLOY - 'get_random_secret_key()'
# SECRET_KEY = os.getenv('SECRET_KEY')
SECRET_KEY = get_random_secret_key()
# SECRET_KEY = 'dj-insecure-%n@-^1)*k3rwpbivv(alui-__dawdawdj92uf2b8!cwg9w8irk5#5wcn_$asSAWnkjawAAWvgavdw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

# LOGIN_URL = 'https://185.69.155.129/api/root/'

# ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['185.69.155.129']
ALLOWED_HOSTS = [
    '80.91.164.102',
    'testsite.energoatom.com.ua',
    '127.0.0.1',
    'localhost',
    # 'old.energoatom.com.ua',
]

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
ALLOWED_ORIGINS=['http://*', 'https://*']
CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# uncomment lines below to turn on HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True
SECURE_SSL_REDIRECT = False

# SECURE_SSL_CERT = os.path.join(BASE_DIR, 'localhost.crt') 
# SECURE_SSL_KEY = os.path.join(BASE_DIR, 'server.key')

CORS_ALLOWED_ORIGINS = [
    'https://testtwo.energoatom.com.ua',
    'https://mainsite.energoatom.com.ua',
    'https://energoatom.com.ua',
    # 'http://localhost:3000',
    'http://127.0.0.1:5000',

]
# CORS_ALLOW_ALL_ORIGINS = True  # For development, you can allow all origins. Be more restrictive in production.
# CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = [
    "authorization",
    "content-type",
]

CORS_ALLOW_METHODS = [
    "GET",
    "OPTIONS",
    "POST",
]

CORS_ALLOW_CREDENTIALS = True  # If you need to handle credentials (e.g., cookies), set this to True.


RUNSERVERPLUS_SERVER_ADDRESS = '0.0.0.0:8000'
# RUNSERVERPLUS_SERVER_ADDRESS = '185.69.155.129:8000'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'werkzeug_debugger_runserver',
    'django.contrib.staticfiles',
    'rest_framework',    
    'rest_framework_simplejwt',
    'taggit',
    'ckeditor',
    # 'sslserver',
    'news',
    'procurement',
    'scrappy_test',
    # 'background_task',
    'django_extensions',
    'guardian',
    # 'debug_toolbar',
    'django_pdb',
    'corsheaders',
    'django_filters',   # just installed; needs to be configured
]

MIDDLEWARE = [
    # 'news.https_middleware.ForceHTTPSMiddleware',    # forget about this; will be handled by Apache.
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django_pdb.middleware.PdbMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    # ... other authentication backends if needed
]

INTERNAL_IPS = [
    "0.0.0.0",	
    "127.0.0.1",
]

X_FRAME_OPTIONS = 'DENY'

ROOT_URLCONF = 'atomic_energy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'atomic_energy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DB_NAME'),
        'USER': os.getenv('MYSQL_USER'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),  
        'HOST': os.getenv('MYSQL_HOST'),
        'PORT': os.getenv('MYSQL_PORT'),
        'OPTIONS': {
                'charset': 'utf8mb4',   # Use utf8mb4 for full Unicode support
            },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TIME_ZONE')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# DEFAULT_FILE_STORAGE = 'storages.backends.sftpstorage.SFTPStorage'

# from storages.backends.sftpstorage import SFTPStorage
# class CustomStorage(SFTPStorage):
#     def _save(self, name, content):
#         # Save the file to primary storage (e.g., local storage, Amazon S3, etc.)
#         saved_name = super()._save(name, content)

#         # Transfer the saved file to your SFTP media host
#         # Implement logic to send the file using SFTPStorage

#         # Example:
#         try:
#             with self.open(name, 'rb') as local_file:
#                 # Replace these with your SFTP host, username, and directory
#                 remote_file = self.sftp.open('/media/images/' + name, 'wb')
#                 remote_file.write(local_file.read())
#                 remote_file.close()
#                 print('File transferred to SFTP media host successfully!')
#         except Exception as e:
#             print('Error transferring file to SFTP media host:', e)

#         return saved_name
# DEFAULT_FILE_STORAGE = 'storages.backends.sftpstorage.SFTPStorage'

# # SFTP storage settings
# SFTP_STORAGE_HOST = '80.91.164.109'
# SFTP_STORAGE_ROOT = '/home/energoatom/media/'
# SFTP_STORAGE_UID = 'energoatom'
# # SFTP_STORAGE_PASSWORD = 'lkjTFYC1528vhag&@21fcgf'    # not working
# SFTP_KNOWN_HOST_FILE = '/home/administrator/.ssh/known_hosts'

# STORAGES = {
#     'default': {
#         'BACKEND': 'django.core.files.storage.FileSystemStorage',
#     },
#     'media_storage': {
#         "BACKEND": "storages.backends.sftpstorage.SFTPStorage",
#         "OPTIONS": {
#             "host": "80.91.164.109",
#             # "root_path": "/var/www/html/media_proxy/",
#             "root_path": "/home/energoatom/media/",
#             "uid": "energoatom",
#             # "password": "your_sftp_password",  # Optional: Use SSH key authentication if available
#             # Additional options as required by SFTPStorage
#         },
#     },
#     'staticfiles': {
#         'BACKEND': "django.contrib.staticfiles.storage.StaticFilesStorage",
#     }
# }

# MEDIA_URL = 'https://old.energoatom.com.ua/media/'
# DEFAULT_FILE_STODAGE = 'atomic_energy.custom_cdn.CDNStorage'
# CDN_URL = 'https://old.energoatom.com.ua/media/'

# CDN_STORAGE_CONFIG = {
#     'cdn_url': CDN_URL,
# }

# SECURE_SSL_CERT = os.path.join(BASE_DIR, 'localhost.crt') 
# SECURE_SSL_KEY = os.path.join(BASE_DIR, 'server.key')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CKEDITOR_CONFIGS = CKEDITOR_CONFIGS

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 12,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', 
        'rest_framework.authentication.BasicAuthentication',
        
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',   # check if it needs any special configuration (DRF -> API Guide -> Permissions).
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}

SIMPLE_JWT = SIMPLE_JWT

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.history.HistoryPanel',
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
]

CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            # 'filename': '/var/www/atomic_energy/atomic_energy/logs/django.log',   # server's log file
            'filename': 'logs/django.log',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'DEBUG',
    },
}
